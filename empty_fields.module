<?php

/**
 * @file
 * Contains the implementation for the empty_fields module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityDisplayBase;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\PluginSettingsInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\empty_fields\EmptyFieldPluginInterface;

/**
 * Implements hook_help().
 */
function empty_fields_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.empty_fields':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a way to show empty fields that would otherwise be hidden.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function empty_fields_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  /** @var \Drupal\empty_fields\EmptyFieldsPluginManager manager */
  $manager = \Drupal::service('plugin.manager.empty_fields');
  $options = ['' => t('Exclude field from output')];
  foreach ($manager->getDefinitions() as $id => $data) {
    $options[$id] = $data['title'];
  }
  $element['handler'] = [
    '#type' => 'select',
    '#title' => t('Empty display options'),
    '#default_value' => $plugin->getThirdPartySetting('empty_fields', 'handler', ''),
    '#options' => $options,
  ];
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function empty_fields_field_formatter_settings_summary_alter(&$summary, $context) {
  if ($handler = $context['formatter']->getThirdPartySetting('empty_fields', 'handler', '')) {
    /** @var \Drupal\Core\Plugin\DefaultPluginManager manager */
    $manager = \Drupal::service('plugin.manager.empty_fields');
    /** @var \Drupal\empty_fields\EmptyFieldPluginInterface $plugin */
    $plugin = $manager->createInstance($handler);
    $summary[] = $plugin->summaryText();
  }
}

/**
 * @param array $context
 *   An associative array containing:
 *   - entity: The entity being rendered.
 *   - view_mode: The view mode; for example, 'full' or 'teaser'.
 *   - display: The EntityDisplay holding the display options.
 *
 * @param FieldDefinitionInterface $definition
 * @param $handler
 *
 * @return array
 *   Renderable array to display.
 */
function _empty_fields_get_formatted_output($context, FieldDefinitionInterface $definition, $handler) {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager manager */
  $manager = \Drupal::service('plugin.manager.empty_fields');
  /** @var EmptyFieldPluginInterface $plugin */
  $plugin = $manager->createInstance($handler);
  return $plugin->react($context, $definition);
}

/**
 * Implements hook_entity_display_build_alter().
 */
function empty_fields_entity_display_build_alter(&$build, $context) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $context['entity'];
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $context['display'];
  foreach (Element::children($build) as $field_name) {
    if ($entity->get($field_name)
        ->isEmpty() && ($handler = $display->getRenderer($field_name)
        ->getThirdPartySetting('empty_fields', 'handler'))
    ) {
      /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
      $definition = $entity->get($field_name)->getFieldDefinition();
      $component = $display->getComponent($field_name);

      $formatted_empty_field = _empty_fields_get_formatted_output($context, $definition, $handler);

      if (!empty($formatted_empty_field)) {
        $build[$field_name] = [
            '#theme' => 'field',
            '#title' => $definition->getLabel(),
            '#label_display' => $component['label'],
            '#view_mode' => $context['view_mode'],
            '#language' => $entity->get($field_name)->getLangcode(),
            '#field_name' => $definition->getName(),
            '#field_type' => 'string',
            '#field_translatable' => $definition->isTranslatable(),
            '#entity_type' => $entity->getEntityTypeId(),
            '#bundle' => $entity->bundle(),
            '#object' => $entity,
            '#items' => [(object) ['_attributes' => []]],
            '#is_multiple' => FALSE,
            '#attributes' => ['class' => ['empty-fields', "empty-fields__$handler"]],
            // Use simple formatter.
            '#formatter' => 'string',
            '0' => $formatted_empty_field,
          ] + $build[$field_name];
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function empty_fields_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $layout_builder_settings = $display->getThirdPartySettings('layout_builder');

  if (isset($layout_builder_settings['sections'])) {
    $sections = $layout_builder_settings['sections'];

    /** @var \Drupal\layout_builder\Section $section */
    foreach ($sections as $section_id => $section) {
      $components = $section->getComponents();

      /** @var \Drupal\layout_builder\SectionComponent $component */
      foreach ($components as $component_id => $component){
        $region = $component->getRegion();
        $configuration = $component->get('configuration');
        $weight = $component->getWeight();

        if(isset($configuration['formatter']['third_party_settings']['empty_fields']['handler'])) {
          list (, $entity_type_id, $bundle, $field_name) = explode(':', $configuration['id']);
          $context['view_mode'] = EntityDisplayBase::CUSTOM_MODE;

          // If field is empty
          if ($entity->get($field_name)
              ->isEmpty() && ($handler = $display->getRenderer($field_name)
              ->getThirdPartySetting('empty_fields', 'handler'))
          ) {
            /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
            $definition = $entity->get($field_name)->getFieldDefinition();
            $component = $display->getComponent($field_name);

            $formatted_empty_field = _empty_fields_get_formatted_output($context, $definition, $handler);
            if (!empty($formatted_empty_field)) {
              // @todo: Would it be better to render field in a block like layout
              // builder does?
              $build["_layout_builder"][$section_id][$region][$component_id] = [
                '#theme' => 'field',
                '#title' => $definition->getLabel(),
                '#label_display' => $component['label'],
                '#view_mode' => $context['view_mode'],
                '#language' => $entity->get($field_name)->getLangcode(),
                '#field_name' => $definition->getName(),
                '#field_type' => 'string',
                '#field_translatable' => $definition->isTranslatable(),
                '#entity_type' => $entity->getEntityTypeId(),
                '#bundle' => $entity->bundle(),
                '#object' => $entity,
                '#weight' => $weight,
                '#items' => [
                  (object) [
                    '_attributes' => [
                      'class' => [
                        'empty-field'
                      ]
                    ]
                  ]
                ],
                '#is_multiple' => FALSE,
                // Use simple formatter.
                '#formatter' => 'string',
                '0' => _empty_fields_get_formatted_output(
                  $context, $definition, $handler
                ),
              ];
            }
          }
        }
      }
    }
  }
}

